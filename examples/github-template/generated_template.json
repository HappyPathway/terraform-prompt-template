{"readme_content": "# crm-webapp\n\n**Description:** A customer relationship management web application built with React and Node.js.\n\n**Organization:** HappyPathway\n\n## Features\n\n* User authentication and authorization\n* Customer data management\n* Sales pipeline tracking\n* Reporting and analytics\n\n## Technologies Used\n\n* **Frontend:** React, Redux, HTML, CSS, JavaScript\n* **Backend:** Node.js, Express.js, MongoDB\n* **Database:** MongoDB\n\n## Installation\n\n```bash\ngit clone <repository-url>\ncd crm-webapp\nnpm install  # Install frontend dependencies\ncd server\nnpm install  # Install backend dependencies\n```\n\n## Running the Application\n\n```bash\n# Start the frontend development server\nnpm start\n\n# Start the backend server\ncd server\nnpm start\n```\n\n## Contributing\n\nContributions are welcome! Please follow the contribution guidelines.\n\n## License\n\nThis project is licensed under the MIT License.", "best_practices": ["Use a consistent coding style guide (e.g., ESLint, Prettier).", "Implement a robust testing strategy (unit, integration, end-to-end tests).", "Use a version control system (e.g., Git) and follow a clear branching strategy.", "Employ a modular design approach for both frontend and backend.", "Securely handle sensitive data (e.g., customer PII).", "Optimize for performance (e.g., minimize bundle size, efficient database queries).", "Implement logging and monitoring to track application behavior and identify issues.", "Use a package manager (npm, yarn) for dependency management.", "Document code thoroughly using JSDoc or similar tools.", "Follow accessibility best practices (WCAG)."], "suggested_extensions": ["ESLint", "Prettier", "React Developer Tools", "Node.js Modules Intellisense"], "documentation_source": ["React documentation: https://reactjs.org/docs/getting-started.html", "Node.js documentation: https://nodejs.org/en/docs/", "Express.js documentation: https://expressjs.com/", "Mongoose documentation: https://mongoosejs.com/"], "copilot_instructions": "Generate React components for user interface elements such as forms, tables, and dashboards.\nGenerate Node.js API endpoints for handling data interactions with the database.\nGenerate tests for React components and Node.js API endpoints.\nGenerate documentation for the project, including API documentation and user guides."}